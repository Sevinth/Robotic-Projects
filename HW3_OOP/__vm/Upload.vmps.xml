<VisualMicro>
  <Program Name="HW3_OOP" Ext=".ino" Location="C:\Robotic-Projects\HW3_OOP">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Mark\AppData\Local\Temp\VMicroBuilds\HW3_OOP\pololu_pololu_avr_a-star32U4" SketchName="HW3_OOP" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_USB;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Platform="avr" Architecture="avr" Package="pololu">
      <Board Name="pololu_pololu_avr_a-star32U4" Description="Pololu A-Star 32U4" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\leonardo" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\Mark\Documents\Arduino" name="Pololu A-Star 32U4" vid.0="0x1ffb" pid.0="0x0101" vid.1="0x1ffb" pid.1="0x2300" upload.tool="arduino:avrdude" upload.protocol="avr109" upload.maximum_size="28672" upload.maximum_data_size="2560" upload.speed="57600" upload.disable_flushing="true" upload.use_1200bps_touch="true" upload.wait_for_upload_port="true" bootloader.tool="arduino:avrdude" bootloader.low_fuses="0xff" bootloader.high_fuses="0xd0" bootloader.extended_fuses="0xc8" bootloader.file="caterina/Caterina-A-Star.hex" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x2F" build.mcu="atmega32u4" build.f_cpu="16000000L" build.vid="0x1ffb" build.pid="0x2300" build.usb_product="&quot;Pololu A-Star 32U4&quot;" build.usb_manufacturer="&quot;Pololu Corporation&quot;" build.board="AVR_A_STAR_32U4" build.core="arduino:arduino" build.variant="arduino:leonardo" build.extra_flags="{build.usb_flags}" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Users\Mark\Documents\Arduino\hardware\pololu\avr\system" runtime.ide.version="10609" target_package="pololu" target_platform="avr" runtime.hardware.path="C:\Users\Mark\Documents\Arduino\hardware\pololu" originalid="pololu_avr_a-star32U4" intellisense.tools.path="{runtime.tools.avr-gcc.path}/" intellisense.include.paths="{intellisense.tools.path}avr/include/;{intellisense.tools.path}/avr/include/avr/;{intellisense.tools.path}lib\gcc\avr\4.8.1\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}/hardware/arduino/avr/bootloaders/{bootloader.file}&quot;" version="1.5.6" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="{compiler.warning_flags} -Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\b3x05dwk.yaq\Micro Platforms\arduino16x" usbavrpgm.name="Pololu USB AVR Programmer" usbavrpgm.communication="serial" usbavrpgm.protocol="avrispv2" usbavrpgm.program.protocol="avrispv2" usbavrpgm.program.tool="arduino:avrdude" usbavrpgm.program.extra_params="-P{serial.port}" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="pololu_pololu_avr_a-star32U4" runtime.vm.boardinfo.name="pololu_pololu_avr_a-star32U4" runtime.vm.boardinfo.desc="Pololu A-Star 32U4" runtime.vm.boardinfo.src_location="C:\Users\Mark\Documents\Arduino\hardware\pololu\avr" ide.hint="For use with Arduino.cc 1.6.2+ ide" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.6.9" ide.default.version="10609" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="C:\Users\Mark\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\Mark\Documents\Arduino\hardware\pololu\avr" runtime.platform.path="C:\Users\Mark\Documents\Arduino\hardware\pololu\avr" vm.platformname.name="avr" build.arch="AVR" build.variant.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\leonardo" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.compiler.auto_discover_includes="true" vm.last.buildpath="C:\Users\Mark\AppData\Local\Temp\VMicroBuilds\HW3_OOP\pololu_pololu_avr_a-star32U4" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Robot.cpp, line 396" Id="4190dbca-b796-400b-871f-ff19c5bb6449" Enabled="1" Message="{angVal}{accAngle}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="396" FileColumn="1" FunctionName="compFilter(unsigned long deltaTime, float sensor1, float sensor2)" FunctionLineOffset="26" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4190dbca-b796-400b-871f-ff19c5bb6449'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>389			xAcc = 0.0;
390		}
391	
392		accAngle = atan2(yAcc, xAcc);
393		
394		float angVal = COMP_F*(sensor1)+(1.0f - COMP_F)*accAngle;
395	
--&gt;396		angVal = COMP_F_B*(angVal)+(1.0f - COMP_F_B)*sensor2;
397	
398		//Filtered angular position,
399		return angVal;
400	
401	}
402	
403	
404	int RobotClass::getRightCounts() {
405		
</Source>
        <MessageVariables>
          <MessageVariable Name="angVal" Index="1" />
          <MessageVariable Name="accAngle" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Robot.cpp, line 280" Id="dd99c36d-2038-445b-912b-c962bae674d1" Enabled="1" Message="{currAcc.xAcc}{currAcc.yAcc}{currAcc.zAcc}{accXNoise}{accYNoise}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}{4}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="280" FileColumn="1" FunctionName="readIMU()" FunctionLineOffset="50" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='dd99c36d-2038-445b-912b-c962bae674d1'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>273	
274		if (rAccel.a.z &gt;= accZNoise || rAccel.a.z &lt;= -accZNoise) {
275			currAcc.zAcc = rAccel.a.z - accOffsets.zAcc;
276		}
277	
278		convAccVals();
279		convGyroVals();	
--&gt;280	
281	
282	}
283	
284	void RobotClass::convGyroVals() {
285	
286		currGyro.xRot *= GYRO_CONV;
287		currGyro.yRot *= GYRO_CONV;
288		currGyro.zRot *= GYRO_CONV;
289	
</Source>
        <MessageVariables>
          <MessageVariable Name="currAcc.xAcc" Index="1" />
          <MessageVariable Name="currAcc.yAcc" Index="2" />
          <MessageVariable Name="currAcc.zAcc" Index="3" />
          <MessageVariable Name="accXNoise" Index="4" />
          <MessageVariable Name="accYNoise" Index="5" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="Robot.cpp, line 431" Id="1376f631-d47b-49f0-aad3-34c73fed0dbf" Enabled="1" Message="{angle}{globalCurrentPos.theta}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="431" FileColumn="1" FunctionName="rotateInPlace(float angle)" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1376f631-d47b-49f0-aad3-34c73fed0dbf'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>424		}
425		//negative angle = right turn
426		else if (angle &lt; 0) {
427			motors.setRightMotorSpeed(-50);
428			motors.setLeftMotorSpeed(50);
429		}
430	
--&gt;431		while (fabs(globalCurrentPos.theta - startAngle) &lt; fabs(angle) - 0.08 || fabs(globalCurrentPos.theta - startAngle) &gt; fabs(angle) + 0.08) {
432			updatePosition(RobotClass::IMU_ENC);
433		}
434	
435		//Stop robot turning once it gets to the correct angle
436		robotStop();
437		
438	
439	}
440	void RobotClass::moveTo(RobotClass::rPosition waypoint, RobotClass::pathType path) {
</Source>
        <MessageVariables>
          <MessageVariable Name="angle" Index="1" />
          <MessageVariable Name="globalCurrentPos.theta" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Robot.cpp, line 596" Id="d358c022-144f-4b73-937b-6d68eb0b8ceb" Enabled="1" Message="{dTime}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="596" FileColumn="1" FunctionName="calcRVelocities(float &amp;lDist, float &amp;rDist, unsigned long &amp;dTime)" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d358c022-144f-4b73-937b-6d68eb0b8ceb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>589	
590	
591	void RobotClass::calcRVelocities(float &amp;lDist, float &amp;rDist, unsigned long &amp;dTime) {
592	
593		rVel.rightWheel = 1000.0f*rDist/ dTime;
594		rVel.leftWheel = 1000.0f*lDist / dTime;
595		rVel.center = 0.5*(rVel.rightWheel + rVel.leftWheel);
--&gt;596		rVel.angular = (1.0 / rWheelBase)*(rVel.rightWheel - rVel.leftWheel);
597	
598	}
599	
600	
601	//Set velocity of the left wheel in inches/second
602	void RobotClass::setLeftWheelVelocity(float vel) {
603	
604		if (rVel.leftWheel &lt; vel) {
605			leftWheelVel++;
</Source>
        <MessageVariables>
          <MessageVariable Name="dTime" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Robot.cpp, line 546" Id="fc161490-e359-48b3-a15c-e2e2583aae27" Enabled="1" Message="{rightWheelVel}{leftWheelVel}{velRatio}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="546" FileColumn="1" FunctionName="moveTo(RobotClass::rPosition waypoint, RobotClass::pathType path)" FunctionLineOffset="104" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fc161490-e359-48b3-a15c-e2e2583aae27'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>539	
540	
541		
542			rightWheelVel = 50.0
543				;
544			leftWheelVel = rightWheelVel*velRatio;
545			lcd.clear();
--&gt;546	
547			
548			while (globalCurrentPos.theta &gt;= M_PI + 0.1 || globalCurrentPos.theta &lt;= M_PI) {
549	
550				motors.setLeftMotorSpeed(1.2*leftWheelVel);
551				motors.setRightMotorSpeed(0.9*rightWheelVel);
552	
553				updatePosition(RobotClass::IMU_ENC);
554	
555				lcd.gotoXY(0, 0);
</Source>
        <MessageVariables>
          <MessageVariable Name="rightWheelVel" Index="1" />
          <MessageVariable Name="leftWheelVel" Index="2" />
          <MessageVariable Name="velRatio" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="Robot.cpp, line 165" Id="f0410bd9-65bc-4f23-931e-3f1dd3d1ec20" Enabled="1" Message="{turnVel.right}{turnVel.leftVel]" MessageTextType="0" PreProcessedMessage="{0}{turnVel.leftVel]" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="165" FileColumn="1" FunctionName="calcTurnVel(float turnRadius)" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f0410bd9-65bc-4f23-931e-3f1dd3d1ec20'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>158	
159	void RobotClass::calcTurnVel(float turnRadius) {
160	
161		float desiredV = 10;  //"desired speed"
162	
163		turnVel.right = desiredV*(1.0 - rWheelBase/(2.0f*turnRadius));
164		turnVel.leftVel = desiredV*(1.0 + rWheelBase / (2.0f*turnRadius));
--&gt;165		
166	}
167	
168	
169	
170	//Keep track of the total distance traveled by each wheel and the robots center
171	void RobotClass::updateDistances(float &amp;leftDist, float &amp;rightDist, float &amp;totalDist) {
172	
173		this-&gt;totalLeftWheelDistance += leftDist;
174		this-&gt;totalRightWheelDistance += rightDist;
</Source>
        <MessageVariables>
          <MessageVariable Name="turnVel.right" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="Robot.cpp, line 535" Id="f14e0c2a-3b95-4ea8-ae22-cbf290a5a8d3" Enabled="1" Message="{leftMotorSpeed}{rightMotorSpeed}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\robotic-projects\hw3_oop\robot.cpp" FileLine="535" FileColumn="1" FunctionName="moveTo(RobotClass::rPosition waypoint, RobotClass::pathType path)" FunctionLineOffset="93" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f14e0c2a-3b95-4ea8-ae22-cbf290a5a8d3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>528	
529		else if (path == RobotClass::CURVED) {
530			//Maintain the proper turn radius
531	
532			lcd.clear();
533			calcTurnVel(11.0f);
534	
--&gt;535			rightWheelVel = turnVel.right;
536			leftWheelVel = turnVel.leftVel;
537	
538			float velRatio = leftWheelVel / rightWheelVel;
539	
540	
541		
542			rightWheelVel = 50.0
543				;
544			leftWheelVel = rightWheelVel*velRatio;
</Source>
        <MessageVariables>
          <MessageVariable Name="leftMotorSpeed" Index="1" />
          <MessageVariable Name="rightMotorSpeed" Index="2" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>